@mixin rotate($initial_trans, $type, $direction) {
  $steps: 4;
  $multiplier: 1;
  @if($direction == 'anticlockwise') {
    $multiplier: -1;
  }

  @for $step from 1 through $steps {
    $rotation: ($multiplier * (($step % 4) * 90)) + 'deg';
    &.#{'rotate'+$type} {
      &.#{$direction} {
        &.#{'step-'+$step} {
          @if($type == X) {
            @include transform($initial_trans rotateX(#{$rotation}));
          } @else if($type == Y) {
            @include transform($initial_trans rotateY(#{$rotation}));
          } @else if($type == Z) {
            @include transform($initial_trans rotateZ(#{$rotation}));
          }
        }
      }
    }
  }
}

@mixin rotateClockwise($initial_trans, $rotation) {
  @include rotate($initial_trans, $rotation, 'clockwise');
}
@mixin rotateAntiClockwise($initial_trans, $rotation) {
  @include rotate($initial_trans, $rotation, 'anticlockwise');
}

@mixin rotations($initial_trans) {
  @include rotationsX($initial_trans);
  @include rotationsY($initial_trans);
  @include rotationsZ($initial_trans);
}

@mixin rotationsX($initial_trans) {
  @include rotateClockwise($initial_trans, 'X');
  @include rotateAntiClockwise($initial_trans, 'X');
}

@mixin rotationsY($initial_trans) {
  @include rotateClockwise($initial_trans, 'Y');
  @include rotateAntiClockwise($initial_trans, 'Y');
}

@mixin rotationsZ($initial_trans) {
  @include rotateClockwise($initial_trans, 'Z');
  @include rotateAntiClockwise($initial_trans, 'Z');
}