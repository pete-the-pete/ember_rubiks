@mixin rotate($initial_trans, $type, $direction) {
  $steps: 4;
  $multiplier: 1;
  $steps_class: 'step';
  @if($direction == 'anticlockwise') {
    $multiplier: -1;
  }

 &.#{'rotate'+$type} {
    //to handle dynamic transform-origin
    @content;
    @for $step from 1 through $steps {
      $rotation: ($multiplier * (($step) * 90)) + 'deg';
      &.#{$direction} {
        &.#{$steps_class} {
          @if($type == X) {
            @include transform($initial_trans rotateX(#{$rotation}));
          } @else if($type == Y) {
            @include transform($initial_trans rotateY(#{$rotation}));
          } @else if($type == Z) {
            @include transform($initial_trans rotateZ(#{$rotation}));
          }
        }
      }
      $steps_class: $steps_class + 'step';
    }
  }
}

@mixin rotateClockwise($initial_trans, $rotation) {
  @include rotate($initial_trans, $rotation, 'clockwise') { @content; }
}
@mixin rotateAntiClockwise($initial_trans, $rotation) {
  @include rotate($initial_trans, $rotation, 'anticlockwise') { @content; }
}

@mixin rotations($initial_trans) {
  @include rotationsX($initial_trans) { @content; }
  @include rotationsY($initial_trans) { @content; }
  @include rotationsZ($initial_trans) { @content; }
}

@mixin rotationsX($initial_trans) {
  @include rotateClockwise($initial_trans, 'X') { @content; }
  @include rotateAntiClockwise($initial_trans, 'X') { @content; }
}

@mixin rotationsY($initial_trans) {
  @include rotateClockwise($initial_trans, 'Y') { @content; }
  @include rotateAntiClockwise($initial_trans, 'Y') { @content; }
}

@mixin rotationsZ($initial_trans) {
  @include rotateClockwise($initial_trans, 'Z') { @content; }
  @include rotateAntiClockwise($initial_trans, 'Z') { @content; }
}